/* 
 * Chomp Food & Recipe Database API Documentation
 *
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. * Get a **Food Data API** key at **[https://chompthis.com/api](https://chompthis.com/api/)**. * Get a **Recipe Data API** key at **[https://chompthis.com/api/recipes](https://chompthis.com/api/recipes/)**.  ### Getting Started   * Subscribe to the **[Food Data API](https://chompthis.com/api/#pricing)** or the **[Recipe Data API](https://chompthis.com/api/recipes/#pricing)**.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Recipe response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/example-recipe-response.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### I'm a Premium subscriber. How do I access the API?   * All Premium subscribers must pass in a unique user ID for each user on their platform that is accessing data from the Chomp API. A user ID can be any string of letters and numbers that you assign to your user. Simply add \"user_id\" as a URL parameter when calling the API. *You must add a \"user_id\" URL parameter to every call you make to ANY endpoint.*     * **Example**        > ```ENDPOINT.php?api_key=API_KEY&code=CODE&user_id=USER_ID```  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Food Data API Subscription Options &raquo;](https://chompthis.com/api/)     * [Recipe Data API Subscription Options &raquo;](https://chompthis.com/api/recipes/)     * [Food Data API Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)     * [Recipe Data API Cost Calculator &raquo;](https://chompthis.com/api/recipes/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// An object containing this recipe&#x27;s image URLs
    /// </summary>
    [DataContract]
        public partial class RecipeObjectMetaImages :  IEquatable<RecipeObjectMetaImages>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecipeObjectMetaImages" /> class.
        /// </summary>
        /// <param name="extraLarge">Extra large recipe image.</param>
        /// <param name="large">Large recipe image.</param>
        /// <param name="standard">Standard recipe image.</param>
        /// <param name="gridView">Grid view recipe image.</param>
        /// <param name="small">Small recipe image.</param>
        /// <param name="thumbnail">Thumbnail recipe image.</param>
        /// <param name="extraSmall">Extra small recipe image.</param>
        public RecipeObjectMetaImages(string extraLarge = default(string), string large = default(string), string standard = default(string), string gridView = default(string), string small = default(string), string thumbnail = default(string), string extraSmall = default(string))
        {
            this.ExtraLarge = extraLarge;
            this.Large = large;
            this.Standard = standard;
            this.GridView = gridView;
            this.Small = small;
            this.Thumbnail = thumbnail;
            this.ExtraSmall = extraSmall;
        }
        
        /// <summary>
        /// Extra large recipe image
        /// </summary>
        /// <value>Extra large recipe image</value>
        [DataMember(Name="extra_large", EmitDefaultValue=false)]
        public string ExtraLarge { get; set; }

        /// <summary>
        /// Large recipe image
        /// </summary>
        /// <value>Large recipe image</value>
        [DataMember(Name="large", EmitDefaultValue=false)]
        public string Large { get; set; }

        /// <summary>
        /// Standard recipe image
        /// </summary>
        /// <value>Standard recipe image</value>
        [DataMember(Name="standard", EmitDefaultValue=false)]
        public string Standard { get; set; }

        /// <summary>
        /// Grid view recipe image
        /// </summary>
        /// <value>Grid view recipe image</value>
        [DataMember(Name="grid_view", EmitDefaultValue=false)]
        public string GridView { get; set; }

        /// <summary>
        /// Small recipe image
        /// </summary>
        /// <value>Small recipe image</value>
        [DataMember(Name="small", EmitDefaultValue=false)]
        public string Small { get; set; }

        /// <summary>
        /// Thumbnail recipe image
        /// </summary>
        /// <value>Thumbnail recipe image</value>
        [DataMember(Name="thumbnail", EmitDefaultValue=false)]
        public string Thumbnail { get; set; }

        /// <summary>
        /// Extra small recipe image
        /// </summary>
        /// <value>Extra small recipe image</value>
        [DataMember(Name="extra_small", EmitDefaultValue=false)]
        public string ExtraSmall { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecipeObjectMetaImages {\n");
            sb.Append("  ExtraLarge: ").Append(ExtraLarge).Append("\n");
            sb.Append("  Large: ").Append(Large).Append("\n");
            sb.Append("  Standard: ").Append(Standard).Append("\n");
            sb.Append("  GridView: ").Append(GridView).Append("\n");
            sb.Append("  Small: ").Append(Small).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  ExtraSmall: ").Append(ExtraSmall).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecipeObjectMetaImages);
        }

        /// <summary>
        /// Returns true if RecipeObjectMetaImages instances are equal
        /// </summary>
        /// <param name="input">Instance of RecipeObjectMetaImages to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecipeObjectMetaImages input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExtraLarge == input.ExtraLarge ||
                    (this.ExtraLarge != null &&
                    this.ExtraLarge.Equals(input.ExtraLarge))
                ) && 
                (
                    this.Large == input.Large ||
                    (this.Large != null &&
                    this.Large.Equals(input.Large))
                ) && 
                (
                    this.Standard == input.Standard ||
                    (this.Standard != null &&
                    this.Standard.Equals(input.Standard))
                ) && 
                (
                    this.GridView == input.GridView ||
                    (this.GridView != null &&
                    this.GridView.Equals(input.GridView))
                ) && 
                (
                    this.Small == input.Small ||
                    (this.Small != null &&
                    this.Small.Equals(input.Small))
                ) && 
                (
                    this.Thumbnail == input.Thumbnail ||
                    (this.Thumbnail != null &&
                    this.Thumbnail.Equals(input.Thumbnail))
                ) && 
                (
                    this.ExtraSmall == input.ExtraSmall ||
                    (this.ExtraSmall != null &&
                    this.ExtraSmall.Equals(input.ExtraSmall))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExtraLarge != null)
                    hashCode = hashCode * 59 + this.ExtraLarge.GetHashCode();
                if (this.Large != null)
                    hashCode = hashCode * 59 + this.Large.GetHashCode();
                if (this.Standard != null)
                    hashCode = hashCode * 59 + this.Standard.GetHashCode();
                if (this.GridView != null)
                    hashCode = hashCode * 59 + this.GridView.GetHashCode();
                if (this.Small != null)
                    hashCode = hashCode * 59 + this.Small.GetHashCode();
                if (this.Thumbnail != null)
                    hashCode = hashCode * 59 + this.Thumbnail.GetHashCode();
                if (this.ExtraSmall != null)
                    hashCode = hashCode * 59 + this.ExtraSmall.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
