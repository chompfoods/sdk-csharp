/* 
 * Chomp Food Database API Documentation
 *
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.  ### Getting Started   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Subscription Options &raquo;](https://chompthis.com/api/)     * [Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// An object containing information for this specific item.
    /// </summary>
    [DataContract]
        public partial class IngredientObjectItems :  IEquatable<IngredientObjectItems>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IngredientObjectItems" /> class.
        /// </summary>
        /// <param name="name">Item name as provided by brand owner or as shown on packaging.</param>
        /// <param name="categories">categories.</param>
        /// <param name="nutrients">An array containing nutrient informatio objects for this food item.</param>
        /// <param name="calorieConversionFactor">calorieConversionFactor.</param>
        /// <param name="proteinConversionFactor">The multiplication factor used to calculate protein from nitrogen.</param>
        /// <param name="dietLabels">dietLabels.</param>
        /// <param name="components">An array of objects containing the constituent parts of a food (e.g. bone is a component of meat).</param>
        /// <param name="portions">An array of objects containing information on discrete amounts of a food found in this item.</param>
        /// <param name="commonName">Common name associated with this item. These generally clarify what the item is (e.g. when the brand name is \&quot;BRAND&#x27;s Spicy Enchilada\&quot; the common name may be \&quot;Chicken enchilada\&quot;).</param>
        /// <param name="description">A description of this item.</param>
        /// <param name="footnote">Comments on any unusual aspects of this item. Examples might include unusual aspects of the food overall..</param>
        public IngredientObjectItems(string name = default(string), List<string> categories = default(List<string>), List<IngredientObjectNutrients> nutrients = default(List<IngredientObjectNutrients>), IngredientObjectCalorieConversionFactor calorieConversionFactor = default(IngredientObjectCalorieConversionFactor), decimal? proteinConversionFactor = default(decimal?), BrandedFoodObjectDietLabels dietLabels = default(BrandedFoodObjectDietLabels), List<IngredientObjectComponents> components = default(List<IngredientObjectComponents>), List<IngredientObjectPortions> portions = default(List<IngredientObjectPortions>), string commonName = default(string), string description = default(string), string footnote = default(string))
        {
            this.Name = name;
            this.Categories = categories;
            this.Nutrients = nutrients;
            this.CalorieConversionFactor = calorieConversionFactor;
            this.ProteinConversionFactor = proteinConversionFactor;
            this.DietLabels = dietLabels;
            this.Components = components;
            this.Portions = portions;
            this.CommonName = commonName;
            this.Description = description;
            this.Footnote = footnote;
        }
        
        /// <summary>
        /// Item name as provided by brand owner or as shown on packaging
        /// </summary>
        /// <value>Item name as provided by brand owner or as shown on packaging</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// An array containing nutrient informatio objects for this food item
        /// </summary>
        /// <value>An array containing nutrient informatio objects for this food item</value>
        [DataMember(Name="nutrients", EmitDefaultValue=false)]
        public List<IngredientObjectNutrients> Nutrients { get; set; }

        /// <summary>
        /// Gets or Sets CalorieConversionFactor
        /// </summary>
        [DataMember(Name="calorie_conversion_factor", EmitDefaultValue=false)]
        public IngredientObjectCalorieConversionFactor CalorieConversionFactor { get; set; }

        /// <summary>
        /// The multiplication factor used to calculate protein from nitrogen
        /// </summary>
        /// <value>The multiplication factor used to calculate protein from nitrogen</value>
        [DataMember(Name="protein_conversion_factor", EmitDefaultValue=false)]
        public decimal? ProteinConversionFactor { get; set; }

        /// <summary>
        /// Gets or Sets DietLabels
        /// </summary>
        [DataMember(Name="diet_labels", EmitDefaultValue=false)]
        public BrandedFoodObjectDietLabels DietLabels { get; set; }

        /// <summary>
        /// An array of objects containing the constituent parts of a food (e.g. bone is a component of meat)
        /// </summary>
        /// <value>An array of objects containing the constituent parts of a food (e.g. bone is a component of meat)</value>
        [DataMember(Name="components", EmitDefaultValue=false)]
        public List<IngredientObjectComponents> Components { get; set; }

        /// <summary>
        /// An array of objects containing information on discrete amounts of a food found in this item
        /// </summary>
        /// <value>An array of objects containing information on discrete amounts of a food found in this item</value>
        [DataMember(Name="portions", EmitDefaultValue=false)]
        public List<IngredientObjectPortions> Portions { get; set; }

        /// <summary>
        /// Common name associated with this item. These generally clarify what the item is (e.g. when the brand name is \&quot;BRAND&#x27;s Spicy Enchilada\&quot; the common name may be \&quot;Chicken enchilada\&quot;)
        /// </summary>
        /// <value>Common name associated with this item. These generally clarify what the item is (e.g. when the brand name is \&quot;BRAND&#x27;s Spicy Enchilada\&quot; the common name may be \&quot;Chicken enchilada\&quot;)</value>
        [DataMember(Name="common_name", EmitDefaultValue=false)]
        public string CommonName { get; set; }

        /// <summary>
        /// A description of this item
        /// </summary>
        /// <value>A description of this item</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Comments on any unusual aspects of this item. Examples might include unusual aspects of the food overall.
        /// </summary>
        /// <value>Comments on any unusual aspects of this item. Examples might include unusual aspects of the food overall.</value>
        [DataMember(Name="footnote", EmitDefaultValue=false)]
        public string Footnote { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IngredientObjectItems {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Nutrients: ").Append(Nutrients).Append("\n");
            sb.Append("  CalorieConversionFactor: ").Append(CalorieConversionFactor).Append("\n");
            sb.Append("  ProteinConversionFactor: ").Append(ProteinConversionFactor).Append("\n");
            sb.Append("  DietLabels: ").Append(DietLabels).Append("\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("  Portions: ").Append(Portions).Append("\n");
            sb.Append("  CommonName: ").Append(CommonName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Footnote: ").Append(Footnote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IngredientObjectItems);
        }

        /// <summary>
        /// Returns true if IngredientObjectItems instances are equal
        /// </summary>
        /// <param name="input">Instance of IngredientObjectItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IngredientObjectItems input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Categories == input.Categories ||
                    this.Categories != null &&
                    input.Categories != null &&
                    this.Categories.SequenceEqual(input.Categories)
                ) && 
                (
                    this.Nutrients == input.Nutrients ||
                    this.Nutrients != null &&
                    input.Nutrients != null &&
                    this.Nutrients.SequenceEqual(input.Nutrients)
                ) && 
                (
                    this.CalorieConversionFactor == input.CalorieConversionFactor ||
                    (this.CalorieConversionFactor != null &&
                    this.CalorieConversionFactor.Equals(input.CalorieConversionFactor))
                ) && 
                (
                    this.ProteinConversionFactor == input.ProteinConversionFactor ||
                    (this.ProteinConversionFactor != null &&
                    this.ProteinConversionFactor.Equals(input.ProteinConversionFactor))
                ) && 
                (
                    this.DietLabels == input.DietLabels ||
                    (this.DietLabels != null &&
                    this.DietLabels.Equals(input.DietLabels))
                ) && 
                (
                    this.Components == input.Components ||
                    this.Components != null &&
                    input.Components != null &&
                    this.Components.SequenceEqual(input.Components)
                ) && 
                (
                    this.Portions == input.Portions ||
                    this.Portions != null &&
                    input.Portions != null &&
                    this.Portions.SequenceEqual(input.Portions)
                ) && 
                (
                    this.CommonName == input.CommonName ||
                    (this.CommonName != null &&
                    this.CommonName.Equals(input.CommonName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Footnote == input.Footnote ||
                    (this.Footnote != null &&
                    this.Footnote.Equals(input.Footnote))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Categories != null)
                    hashCode = hashCode * 59 + this.Categories.GetHashCode();
                if (this.Nutrients != null)
                    hashCode = hashCode * 59 + this.Nutrients.GetHashCode();
                if (this.CalorieConversionFactor != null)
                    hashCode = hashCode * 59 + this.CalorieConversionFactor.GetHashCode();
                if (this.ProteinConversionFactor != null)
                    hashCode = hashCode * 59 + this.ProteinConversionFactor.GetHashCode();
                if (this.DietLabels != null)
                    hashCode = hashCode * 59 + this.DietLabels.GetHashCode();
                if (this.Components != null)
                    hashCode = hashCode * 59 + this.Components.GetHashCode();
                if (this.Portions != null)
                    hashCode = hashCode * 59 + this.Portions.GetHashCode();
                if (this.CommonName != null)
                    hashCode = hashCode * 59 + this.CommonName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Footnote != null)
                    hashCode = hashCode * 59 + this.Footnote.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
