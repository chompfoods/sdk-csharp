/* 
 * Chomp Food Database API Documentation
 *
 * __Important:__   - An __[API key](https://chompthis.com/api/)__ is required for access to this API.   - Get yours at __[https://chompthis.com/api](https://chompthis.com/api/)__.  - -- --  __Getting Started:__   - __[Subscribe](https://chompthis.com/api/#pricing)__ to the API.   - Scroll down and click the \"__Authorize__\" button.   - Enter your API key into the \"__value__\" input, click the \"__Authorize__\" button, then click the \"__Close__\" button.   - Scroll down to the section titled \"__default__\" and click on the API endpoint you wish to use.   - Click the \"__Try it out__\" button.   - Enter the information the endpoint requires.   - Click the \"__Execute__\" button.  __Example:__    - __[View example](https://raw.githubusercontent.com/chompfoods/examples/master/response-object.json)__ API response object.  - -- --  __How Do I Find My API Key?__   - Your API key was sent to the email address you used to create your subscription.   - You will also find your API key in the __[Client Center](https://chompthis.com/api/manage.php)__.   - _Read __[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)__ for more information._  ||| | - -- -- -- | - -- -- -- - | | [Knowledge Base](https://desk.zoho.com/portal/chompthis/kb/chomp) | [Pricing](https://chompthis.com/api/) | | [Attribution](https://chompthis.com/api/docs/attribution.php) | [Cost Calculator](https://chompthis.com/api/cost-calculator.php) | | [Terms & License](https://chompthis.com/api/terms.php) | [Database Search](https://chompthis.com/api/lookup.php) | | [Support](https://chompthis.com/api/ticket-new.php) | [Query Builder](https://chompthis.com/api/build.php) | | [Client Center](https://chompthis.com/api/manage.php) | | 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        /// <summary>
        /// Test FoodBrandedBarcodePhpGet
        /// </summary>
        [Test]
        public void FoodBrandedBarcodePhpGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string code = null;
            //var response = instance.FoodBrandedBarcodePhpGet(code);
            //Assert.IsInstanceOf<BrandedFoodObject> (response, "response is BrandedFoodObject");
        }
        /// <summary>
        /// Test FoodBrandedIdPhpGet
        /// </summary>
        [Test]
        public void FoodBrandedIdPhpGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? id = null;
            //string source = null;
            //var response = instance.FoodBrandedIdPhpGet(id, source);
            //Assert.IsInstanceOf<BrandedFoodObject> (response, "response is BrandedFoodObject");
        }
        /// <summary>
        /// Test FoodBrandedNamePhpGet
        /// </summary>
        [Test]
        public void FoodBrandedNamePhpGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //int? limit = null;
            //var response = instance.FoodBrandedNamePhpGet(name, limit);
            //Assert.IsInstanceOf<BrandedFoodObject> (response, "response is BrandedFoodObject");
        }
        /// <summary>
        /// Test FoodBrandedSearchPhpGet
        /// </summary>
        [Test]
        public void FoodBrandedSearchPhpGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string allergen = null;
            //string brand = null;
            //string category = null;
            //string country = null;
            //string diet = null;
            //string ingredient = null;
            //string keyword = null;
            //string mineral = null;
            //string nutrient = null;
            //string palmOil = null;
            //string trace = null;
            //string vitamin = null;
            //int? limit = null;
            //int? page = null;
            //var response = instance.FoodBrandedSearchPhpGet(allergen, brand, category, country, diet, ingredient, keyword, mineral, nutrient, palmOil, trace, vitamin, limit, page);
            //Assert.IsInstanceOf<BrandedFoodObject> (response, "response is BrandedFoodObject");
        }
        /// <summary>
        /// Test FoodIngredientSearchPhpGet
        /// </summary>
        [Test]
        public void FoodIngredientSearchPhpGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? find = null;
            //bool? list = null;
            //bool? raw = null;
            //int? limit = null;
            //var response = instance.FoodIngredientSearchPhpGet(find, list, raw, limit);
            //Assert.IsInstanceOf<IngredientObject> (response, "response is IngredientObject");
        }
    }

}
